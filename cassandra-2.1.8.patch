--- apache-cassandra-2.1.8-src/src/java/org/apache/cassandra/service/GCInspector.java	2015-07-06 12:30:37.000000000 -0400
+++ apache-cassandra-2.1.8-src-modified/src/java/org/apache/cassandra/service/GCInspector.java	2015-08-26 12:53:37.929770452 -0400
@@ -34,11 +34,18 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.management.GarbageCollectionNotificationInfo;
-import com.sun.management.GcInfo;
+// import com.sun.management.GarbageCollectionNotificationInfo;
+// import com.sun.management.GcInfo;
 import org.apache.cassandra.io.sstable.SSTableDeletingTask;
 import org.apache.cassandra.utils.StatusLogger;
 
+class GarbageCollectionNotificationInfo {
+
+}
+class GcInfo {
+
+}
+
 public class GCInspector implements NotificationListener, GCInspectorMXBean
 {
     public static final String MBEAN_NAME = "org.apache.cassandra.service:type=GCInspector";
@@ -90,11 +97,11 @@
 
         String[] keys(GarbageCollectionNotificationInfo info)
         {
-            if (keys != null)
-                return keys;
+            // if (keys != null)
+            //     return keys;
 
-            keys = info.getGcInfo().getMemoryUsageBeforeGc().keySet().toArray(new String[0]);
-            Arrays.sort(keys);
+            // keys = info.getGcInfo().getMemoryUsageBeforeGc().keySet().toArray(new String[0]);
+            // Arrays.sort(keys);
 
             return keys;
         }
@@ -195,71 +202,71 @@
 
     public void handleNotification(final Notification notification, final Object handback)
     {
-        String type = notification.getType();
-        if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION))
-        {
-            // retrieve the garbage collection notification information
-            CompositeData cd = (CompositeData) notification.getUserData();
-            GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd);
-            String gcName = info.getGcName();
-            GcInfo gcInfo = info.getGcInfo();
-
-            long duration = gcInfo.getDuration();
-
-            /*
-             * The duration supplied in the notification info includes more than just
-             * application stopped time for concurrent GCs. Try and do a better job coming up with a good stopped time
-             * value by asking for and tracking cumulative time spent blocked in GC.
-             */
-            GCState gcState = gcStates.get(gcName);
-            if (gcState.assumeGCIsPartiallyConcurrent)
-            {
-                long previousTotal = gcState.lastGcTotalDuration;
-                long total = gcState.gcBean.getCollectionTime();
-                gcState.lastGcTotalDuration = total;
-                duration = total - previousTotal; // may be zero for a really fast collection
-            }
-
-            StringBuilder sb = new StringBuilder();
-            sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ");
-            long bytes = 0;
-            Map<String, MemoryUsage> beforeMemoryUsage = gcInfo.getMemoryUsageBeforeGc();
-            Map<String, MemoryUsage> afterMemoryUsage = gcInfo.getMemoryUsageAfterGc();
-            for (String key : gcState.keys(info))
-            {
-                MemoryUsage before = beforeMemoryUsage.get(key);
-                MemoryUsage after = afterMemoryUsage.get(key);
-                if (after != null && after.getUsed() != before.getUsed())
-                {
-                    sb.append(key).append(": ").append(before.getUsed());
-                    sb.append(" -> ");
-                    sb.append(after.getUsed());
-                    if (!key.equals(gcState.keys[gcState.keys.length - 1]))
-                        sb.append("; ");
-                    bytes += before.getUsed() - after.getUsed();
-                }
-            }
-
-            while (true)
-            {
-                State prev = state.get();
-                if (state.compareAndSet(prev, new State(duration, bytes, prev)))
-                    break;
-            }
-
-            String st = sb.toString();
-            if (duration > MIN_LOG_DURATION)
-                logger.info(st);
-            else if (logger.isDebugEnabled())
-                logger.debug(st);
-
-            if (duration > MIN_LOG_DURATION_TPSTATS)
-                StatusLogger.log();
-
-            // if we just finished an old gen collection and we're still using a lot of memory, try to reduce the pressure
-            if (gcState.assumeGCIsOldGen)
-                SSTableDeletingTask.rescheduleFailedTasks();
-        }
+        // String type = notification.getType();
+        // if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION))
+        // {
+        //     // retrieve the garbage collection notification information
+        //     CompositeData cd = (CompositeData) notification.getUserData();
+        //     GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd);
+        //     String gcName = info.getGcName();
+        //     GcInfo gcInfo = info.getGcInfo();
+
+        //     long duration = gcInfo.getDuration();
+
+        //     /*
+        //      * The duration supplied in the notification info includes more than just
+        //      * application stopped time for concurrent GCs. Try and do a better job coming up with a good stopped time
+        //      * value by asking for and tracking cumulative time spent blocked in GC.
+        //      */
+        //     GCState gcState = gcStates.get(gcName);
+        //     if (gcState.assumeGCIsPartiallyConcurrent)
+        //     {
+        //         long previousTotal = gcState.lastGcTotalDuration;
+        //         long total = gcState.gcBean.getCollectionTime();
+        //         gcState.lastGcTotalDuration = total;
+        //         duration = total - previousTotal; // may be zero for a really fast collection
+        //     }
+
+        //     StringBuilder sb = new StringBuilder();
+        //     sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ");
+        //     long bytes = 0;
+        //     Map<String, MemoryUsage> beforeMemoryUsage = gcInfo.getMemoryUsageBeforeGc();
+        //     Map<String, MemoryUsage> afterMemoryUsage = gcInfo.getMemoryUsageAfterGc();
+        //     for (String key : gcState.keys(info))
+        //     {
+        //         MemoryUsage before = beforeMemoryUsage.get(key);
+        //         MemoryUsage after = afterMemoryUsage.get(key);
+        //         if (after != null && after.getUsed() != before.getUsed())
+        //         {
+        //             sb.append(key).append(": ").append(before.getUsed());
+        //             sb.append(" -> ");
+        //             sb.append(after.getUsed());
+        //             if (!key.equals(gcState.keys[gcState.keys.length - 1]))
+        //                 sb.append("; ");
+        //             bytes += before.getUsed() - after.getUsed();
+        //         }
+        //     }
+
+        //     while (true)
+        //     {
+        //         State prev = state.get();
+        //         if (state.compareAndSet(prev, new State(duration, bytes, prev)))
+        //             break;
+        //     }
+
+        //     String st = sb.toString();
+        //     if (duration > MIN_LOG_DURATION)
+        //         logger.info(st);
+        //     else if (logger.isDebugEnabled())
+        //         logger.debug(st);
+
+        //     if (duration > MIN_LOG_DURATION_TPSTATS)
+        //         StatusLogger.log();
+
+        //     // if we just finished an old gen collection and we're still using a lot of memory, try to reduce the pressure
+        //     if (gcState.assumeGCIsOldGen)
+        //         SSTableDeletingTask.rescheduleFailedTasks();
+        // }
     }
 
     public State getTotalSinceLastCheck()
